service: SP-DeviceData

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  profile: mzilli/serverless-agent-admin
  region: us-east-1
  memorySize: 128
  timeout: 6
  custom:
    folderName: data
  environment:
    DYNAMODB_TABLE: SPDeviceData  # ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  get:
    handler: ${self:provider.custom.folderName}/get.get
    name: ${self:provider.stage}-GetDeviceDataFromDynamo
    description: Get the last 'n' published data items from Dynamo 
    events:
      - http:
          path: device/data/get
          method: get
          cors: true
  insert:
    handler: ${self:provider.custom.folderName}/insert.insert
    name: ${self:provider.stage}-DeviceDataToDynamo
    description: Insert data to Dynamo
    events:
      - iot:
        sql: " SELECT * FROM '#'"
        description: "Insert published device data to Dynamo"
      - http:
          path: device/data/insert
          method: post
          cors: true

resources:
  Resources:
    SPDeviceData:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: topic
            AttributeType: S
          -
            AttributeName: timestamp
            AttributeType: S
        KeySchema:
          -
            AttributeName: topic
            KeyType: HASH
          -
            AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}